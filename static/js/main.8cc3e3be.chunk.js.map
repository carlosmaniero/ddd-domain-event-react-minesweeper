{"version":3,"sources":["domain/minesweeper/field/mine.ts","domain/events/events.ts","domain/minesweeper/gameLevel.ts","domain/coordinate/coordinate.ts","domain/minesweeper/field/field.ts","domain/settings.ts","domain/minesweeper/field/SweptAwayCoordinates.ts","domain/minesweeper/minesweeper.ts","view/components/eventHandler/eventHandlerContext.ts","infrastructure/events/eventHandler.ts","view/components/designSystem/buttons/RegularButton.tsx","view/components/levelSelector/LevelButton.tsx","view/components/levelSelector/LevelSelector.tsx","domain/minesweeper/services/createMinesweeperService.ts","view/presenters/boardCoordinate.ts","view/components/board/GameCoordinateButton.tsx","view/presenters/FieldPresenter.ts","view/components/board/GameBoard.tsx","view/components/designSystem/messages/OverlayMessage.tsx","view/components/gameStatus/gameOver.tsx","view/components/gameStatus/gameWin.tsx","domain/mineIndicator/MineIndicator.ts","domain/mineIndicator/MineIndicatorService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MineType","isTypeOf","type","event","anyOf","eventCreators","some","eventCreator","Object","assign","payload","GameLevel","mineCreatorFactory","initialCoordinate","probability","numberGenerator","Math","random","isInitialCoordinate","coordinate","sameOf","isAdjacent","isAdjacentOf","attendToProbability","isMine","Mine","NotMine","Coordinate","x","y","this","getAdjacent","adjacentCoordinate","of","coordinates","otherCoordinate","Field","board","filter","mineType","length","getByCoordinate","nearBombCount","flat","range","getHeight","flatMap","getWidth","map","getCoordinates","boardElement","size","Array","from","_","index","createGameBoard","mineCreator","boardSize","boardLineCreator","width","line","column","boardLineCreatorFor","height","gameLevelSettings","gameLevel","EASY","mineProbability","MEDIUM","HARD","SweptAwayCoordinates","revealedCoordinates","isRevealed","propagateSweep","revealedCoordinate","bombCount","totalToSweep","sweptCoordinates","field","afterAutoSweepCoordinates","isPresent","wasSweep","containsCoordinate","hasBombNear","Minesweeper","eventPublisher","mineFactory","sweptAwayCoordinates","hasBombExploded","isSweeperDead","completelySweptAway","isBomb","explodeBomb","sweepCoordinate","startGame","sweep","publishEvent","events","finished","revealed","hasCoordinatesToBeSwept","createBoard","started","publish","gameOver","created","minesweeperFactory","EventHandlerContext","React","createContext","subscriptions","subscriptionID","listen","eventChecker","callback","push","clonedPayload","create","getPrototypeOf","subscription","forEach","unsubscribe","createEventHandler","Button","styled","button","LevelRegularButton","children","onClick","className","props","level","LevelSelectorSection","section","LevelButtonSection","LevelButtonWithMargin","LevelSelectorTitle","h1","LevelSelector","onSelect","values","key","CreateMinesweeperService","game","isRevealedWithNoBombNear","boardCoordinate","isRevealedWithBombsNear","isFlagged","GameCoordinateElement","boardCoordinateAriaLabel","coordinateToText","FieldPresenter","minesweeper","mineIndicator","boardTotalCoordinates","coordinateFromIndex","trunc","createFlaggedCoordinate","isSwept","createRevealedCoordinateWithBombs","createRevealedCoordinateWithoutBombs","createNotRevealedCoordinate","GameBoardGrid","GameCoordinateButtonHighlighted","onMouseEnter","onContextMenu","e","preventDefault","aria-label","boardCoordinateText","highlightedCoordinates","GameBoard","useState","setCoordinates","boardCoordinates","toggleFlag","fromTop","keyframes","GameOverSection","OverlayMessage","GameOver","GameWin","MineIndicator","removeFlag","addFlag","newMineIndicator","flagAdded","addedCoordinate","flagRemoved","MineIndicatorService","App","setMinesweeper","setMineIndicator","useContext","createMinesweeperService","mineIndicatorService","useEffect","minesweeperCreatedSubscriptionID","mineIndicatorChangedSubscriptionId","minesweeperChangedSubscriptionID","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8cc3e3be.chunk.js","sourcesContent":["import {Coordinate} from '../../coordinate/coordinate';\n\nexport enum MineType {\n    Mine = 'Mine',\n    NotMine = 'NotMine'\n}\n\ntype NumberGenerator = () => number;\n\nexport type MineCreator = (coordinate: Coordinate) => MineType;\nexport type MineFactory = (initialCoordinate: Coordinate, probability: number, numberGenerator?: NumberGenerator) => MineCreator\n\nexport const mineCreatorFactory: MineFactory = (initialCoordinate: Coordinate, probability: number, numberGenerator: NumberGenerator = Math.random): MineCreator => {\n    const isInitialCoordinate = (coordinate: Coordinate) => coordinate.sameOf(initialCoordinate);\n    const isAdjacent = (coordinate: Coordinate) => coordinate.isAdjacentOf(initialCoordinate);\n    const attendToProbability = () => numberGenerator() <= probability;\n    const isMine = (coordinate: Coordinate) => !isInitialCoordinate(coordinate) && !isAdjacent(coordinate) && attendToProbability();\n\n    return (coordinate: Coordinate) => isMine(coordinate) ? MineType.Mine : MineType.NotMine;\n};","export type Event<T> = {\n    type: string,\n    payload: T\n}\n\nexport interface EventPublisher {\n    publish: (event: Event<unknown>) => void\n}\n\nexport interface EventChecker<T> {\n    isTypeOf: (event: Event<unknown>) => event is Event<T>\n} \n\nexport type EventCreator<T> = {\n    (payload: T): Event<T>;\n    type: string;\n} & EventChecker<T>;\n\nconst isTypeOf = <T>(type: string) =>\n    (event: Event<unknown>): event is Event<T> => event.type === type;\n\nexport const anyOf = <T>(eventCreators: EventCreator<T>[]): EventChecker<T> => ({\n    isTypeOf: (event: Event<unknown>): event is Event<T> =>\n        eventCreators.some((eventCreator) => eventCreator.isTypeOf(event))\n});\n\nexport const eventCreator = <T>(type: string): EventCreator<T> =>\n    Object.assign(\n        (payload: T) => ({type, payload}),\n        {\n            type,\n            isTypeOf: isTypeOf<T>(type)\n        });","export enum GameLevel {\n    EASY = 'Easy',\n    MEDIUM = 'Medium',\n    HARD = 'Hard',\n}\n\nexport const getAllGameLevels = () => Object.values(GameLevel);","export class Coordinate {\n    public readonly x: number;\n    public readonly y: number;\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public isAdjacentOf(coordinate: Coordinate) {\n        return coordinate.getAdjacent().some((adjacentCoordinate) => adjacentCoordinate.sameOf(this));\n    }\n\n    public getAdjacent() {\n        return [\n            Coordinate.of({x: this.x - 1, y: this.y - 1}),\n            Coordinate.of({x: this.x, y: this.y -1}),\n            Coordinate.of({x: this.x + 1, y: this.y - 1}),\n            Coordinate.of({x: this.x - 1, y: this.y}),\n            Coordinate.of({x: this.x + 1, y: this.y}),\n            Coordinate.of({x: this.x - 1, y: this.y + 1}),\n            Coordinate.of({x: this.x, y: this.y + 1}),\n            Coordinate.of({x: this.x + 1, y: this.y + 1}),\n        ];\n    }\n\n    public isPresent(coordinates: Coordinate[]) {\n        return coordinates.some((otherCoordinate) => this.sameOf(otherCoordinate));\n    }\n\n    public sameOf(otherCoordinate: Coordinate) {\n        return this.x === otherCoordinate.x && this.y === otherCoordinate.y\n    }\n\n    static of(coordinate: {x: number, y: number}): Coordinate {\n        return new Coordinate(coordinate.x, coordinate.y);\n    }\n}","import {MineCreator, MineType} from \"./mine\";\nimport {Coordinate} from \"../../coordinate/coordinate\";\n\nexport interface BoardSize {\n    width: number;\n    height: number;\n}\n\nexport class Field {\n    constructor(readonly board: MineType[][]) {\n        this.board = board;\n    }\n\n    public nearBombCount(coordinate: Coordinate) {\n        return this.getAdjacent(coordinate)\n            .filter(mineType => mineType === MineType.Mine)\n            .length;\n    }\n\n    public isBomb(coordinate: Coordinate) {\n        return this.getByCoordinate(coordinate) === MineType.Mine;\n    }\n\n    public hasBombNear(coordinate: Coordinate) {\n        return this.nearBombCount(coordinate) > 0;\n    }\n\n    public getWidth() {\n        return this.board[0].length;\n    }\n\n    public getHeight() {\n        return this.board.length;\n    }\n\n    public bombCount() {\n        return this.board.flat()\n            .filter(mineType => mineType === MineType.Mine)\n            .length;\n    }\n\n    public coordinates(): Coordinate[] {\n        const getCoordinates = (y: number) =>\n            range(this.getWidth()).map((x) => Coordinate.of({x, y}));\n\n        return range(this.getHeight())\n            .flatMap((y) => getCoordinates(y));\n    }\n\n    public containsCoordinate(coordinate: Coordinate) {\n        if (coordinate.y < 0 || coordinate.x < 0) {\n            return false;\n        }\n        return coordinate.y < this.getHeight() && coordinate.x < this.getWidth();\n    }\n\n    private getAdjacent(coordinate: Coordinate): MineType[] {\n        return coordinate.getAdjacent()\n            .map((coordinate) => this.getByCoordinate(coordinate));\n    }\n\n    private getByCoordinate(coordinate: Coordinate): MineType {\n        let boardElement = this.board[coordinate.y];\n        return boardElement ? boardElement[coordinate.x] : MineType.NotMine;\n    }\n}\n\nexport type BoardCreator = (boardSize: BoardSize) => Field;\n\ntype BoardLineCreator = (line: number) => MineType[];\n\nconst range = (size: number) => Array.from({length: size}, (_, index) => index);\n\nconst boardLineCreatorFor = (mineCreator: MineCreator, width: number): BoardLineCreator => (line: number) =>\n    range(width).map(column => mineCreator(Coordinate.of({x: column, y: line})));\n\nconst createBoard = (boardLineCreator: BoardLineCreator, height: number) =>\n    range(height).map(boardLineCreator);\n\nexport const createGameBoard = (mineCreator: MineCreator): BoardCreator => (boardSize: BoardSize): Field =>\n    new Field(createBoard(boardLineCreatorFor(mineCreator, boardSize.width), boardSize.height));","import {BoardSize} from \"./minesweeper/field/field\";\nimport {GameLevel} from \"./minesweeper/gameLevel\";\n\nexport interface GameLevelSettings {\n    mineProbability: number;\n    boardSize: BoardSize;\n}\n\nexport const gameLevelSettings = (gameLevel: GameLevel): GameLevelSettings => {\n    switch (gameLevel) {\n        case GameLevel.EASY:\n            return {\n                mineProbability: 0.2,\n                boardSize: {width: 6, height: 9}\n            };\n        case GameLevel.MEDIUM:\n            return {\n                mineProbability: 0.2,\n                boardSize: {width: 9, height: 12}\n            };\n        case GameLevel.HARD:\n            return {\n                mineProbability: 0.17,\n                boardSize: {width: 12, height: 15}\n            };\n    }\n};","import {Coordinate} from \"../../coordinate/coordinate\";\nimport {Field} from \"./field\";\n\nexport class SweptAwayCoordinates {\n    constructor(readonly revealedCoordinates: Coordinate[] = []) {}\n\n    public sweep(coordinate: Coordinate, board: Field) {\n        const revealedCoordinates = this.isRevealed(coordinate)\n            ? this.revealedCoordinates\n            : [...this.revealedCoordinates, coordinate];\n\n        return new SweptAwayCoordinates(SweptAwayCoordinates.propagateSweep(revealedCoordinates, board))\n    }\n\n    public isRevealed(coordinate: Coordinate) {\n        return this.revealedCoordinates.some(revealedCoordinate => revealedCoordinate.sameOf(coordinate));\n    }\n\n    public hasCoordinatesToBeSwept(board: Field) {\n        return board.bombCount() < this.totalToSweep(board);\n    }\n\n    private totalToSweep(board: Field) {\n        return (board.getHeight() * board.getWidth()) - this.revealedCoordinates.length;\n    }\n\n    private static propagateSweep(sweptCoordinates: Coordinate[], field: Field): Coordinate[] {\n        const wasSweep = (coordinate: Coordinate) => coordinate.isPresent(sweptCoordinates);\n\n        const hasBombNear = (coordinate: Coordinate) =>\n            coordinate.getAdjacent()\n                .filter((adjacentCoordinate) => field.containsCoordinate(adjacentCoordinate))\n                .filter((adjacentCoordinate) => adjacentCoordinate.isPresent(sweptCoordinates))\n                .some((adjacentCoordinate) => !field.hasBombNear(adjacentCoordinate));\n\n        const afterAutoSweepCoordinates = field.coordinates()\n            .filter((coordinate: Coordinate) => wasSweep(coordinate) || hasBombNear(coordinate));\n\n        if (afterAutoSweepCoordinates.length !== sweptCoordinates.length) {\n            return SweptAwayCoordinates.propagateSweep(afterAutoSweepCoordinates, field);\n        }\n\n        return afterAutoSweepCoordinates;\n    }\n}","import {Event, eventCreator, EventPublisher} from \"../events/events\";\nimport {Coordinate} from '../coordinate/coordinate'\nimport {mineCreatorFactory, MineFactory} from \"./field/mine\";\nimport {createGameBoard, Field} from \"./field/field\";\nimport {GameLevelSettings, gameLevelSettings} from \"../settings\";\nimport {SweptAwayCoordinates} from \"./field/SweptAwayCoordinates\";\nimport {GameLevel} from \"./gameLevel\";\n\nexport class Minesweeper {\n    static events = {\n        created: eventCreator<Minesweeper>('MINESWEEPER_CREATED'),\n        started: eventCreator<Minesweeper>('MINESWEEPER_STARTED'),\n        revealed: eventCreator<Minesweeper>('MINESWEEPER_REVEALED'),\n        gameOver: eventCreator<Minesweeper>('MINESWEEPER_OVER'),\n        finished: eventCreator<Minesweeper>('MINESWEEPER_FINISHED')\n    };\n\n    private readonly gameLevelSettings: GameLevelSettings;\n\n    constructor(private readonly eventPublisher: EventPublisher,\n                private readonly mineFactory: MineFactory,\n                public readonly gameLevel: GameLevel,\n                private sweptAwayCoordinates: SweptAwayCoordinates = new SweptAwayCoordinates(),\n                private field?: Field,\n                private hasBombExploded: boolean = false) {\n        this.gameLevelSettings = gameLevelSettings(gameLevel);\n        this.gameLevel = gameLevel;\n    }\n\n    public boardSize() {\n        return this.gameLevelSettings.boardSize;\n    }\n\n    public sweep(coordinate: Coordinate) {\n        if (this.isSweeperDead() || this.completelySweptAway()) {\n            return;\n        }\n\n        if (!this.field) {\n            this.startGame(coordinate);\n            return;\n        }\n\n        if (this.field.isBomb(coordinate)) {\n            this.explodeBomb();\n            return;\n        }\n\n        this.sweepCoordinate(coordinate, this.field);\n    }\n\n    private sweepCoordinate(coordinate: Coordinate, field: Field) {\n        this.sweptAwayCoordinates = this.sweptAwayCoordinates.sweep(coordinate, field);\n        this.field = field;\n\n        if (this.completelySweptAway()) {\n            this.publishEvent(Minesweeper.events.finished(this));\n        } else {\n            this.publishEvent(Minesweeper.events.revealed(this));\n        }\n    }\n\n    public bombCount(coordinate: Coordinate) {\n        if (!this.field) {\n            return 0;\n        }\n        return this.field.nearBombCount(coordinate);\n    }\n\n    public hasBombNear(coordinate: Coordinate) {\n        return this.field && this.field.hasBombNear(coordinate);\n    }\n\n    public isSwept(coordinate: Coordinate) {\n        return this.field && this.sweptAwayCoordinates.isRevealed(coordinate);\n    }\n\n    public isSweeperDead(): boolean {\n        return this.hasBombExploded;\n    }\n\n    public completelySweptAway() {\n        return this.field && !this.sweptAwayCoordinates.hasCoordinatesToBeSwept(this.field);\n    }\n\n    private startGame(coordinate: Coordinate) {\n        this.field = this.createBoard(coordinate);\n        this.sweptAwayCoordinates = this.sweptAwayCoordinates.sweep(coordinate, this.field);\n\n        this.publishEvent(Minesweeper.events.started(this));\n    }\n\n    private createBoard(coordinate: Coordinate) {\n        const mineCreator = this.mineFactory(coordinate, this.gameLevelSettings.mineProbability);\n        return createGameBoard(mineCreator)(this.boardSize());\n    }\n\n    private publishEvent(event: Event<Minesweeper>) {\n        this.eventPublisher.publish(event);\n    }\n\n    private explodeBomb() {\n        this.hasBombExploded = true;\n        this.publishEvent(Minesweeper.events.gameOver(this));\n    }\n}\n\nexport type MinesweeperCreator = (gameLevel: GameLevel) => Minesweeper;\n\nexport const minesweeperFactory = (eventPublisher: EventPublisher, mineFactory: MineFactory = mineCreatorFactory): MinesweeperCreator => (gameLevel: GameLevel) =>\n    new Minesweeper(eventPublisher, mineFactory, gameLevel);\n","import {createEventHandler} from \"../../../infrastructure/events/eventHandler\";\nimport React from \"react\";\n\nexport const EventHandlerContext = React.createContext(createEventHandler());","import {Event, EventChecker, EventPublisher} from \"../../domain/events/events\";\n\nexport type EventPublisherCallback<T> = (payload: T) => void;\nexport type SubscriptionID = number;\n\ninterface Subscription {\n    eventCreator: EventChecker<unknown>;\n    callback: EventPublisherCallback<unknown>;\n    subscriptionID: SubscriptionID\n}\n\nexport type EventHandler = EventPublisher & {\n    listen: <T>(eventCreator: EventChecker<T>, callback: EventPublisherCallback<T>) => SubscriptionID,\n    unsubscribe: (subscriptionID: SubscriptionID) => void\n}\n\nexport const createEventHandler = (): EventHandler => {\n    let subscriptions: Subscription[] = [];\n    let subscriptionID: SubscriptionID = 0;\n\n    return {\n        listen<T>(eventChecker: EventChecker<T>, callback: EventPublisherCallback<T>) {\n            subscriptionID++;\n\n            subscriptions.push({\n                subscriptionID: subscriptionID,\n                eventCreator: (eventChecker as EventChecker<unknown>),\n                callback: (callback as EventPublisherCallback<unknown>)\n            });\n\n            return subscriptionID;\n        },\n        publish(event: Event<unknown>) {\n            const clonedPayload = typeof event.payload === 'object'\n                ? Object.assign(Object.create(Object.getPrototypeOf(event.payload)), event.payload)\n                : event.payload;\n            subscriptions\n                .filter(subscription => subscription.eventCreator.isTypeOf(event))\n                .forEach(subscription => subscription.callback(clonedPayload));\n        },\n        unsubscribe(subscriptionID: SubscriptionID) {\n            subscriptions = subscriptions\n                .filter(subscription => subscription.subscriptionID !== subscriptionID);\n        }\n    }\n};","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Button = styled.button`\n  border: 0;\n  border-radius: 10px;\n  padding: 1rem 2rem;\n  box-shadow: 0px 0px 8px 0px rgba(0, 0, 0, 0.3);\n  transition: box-shadow 0.2s ease-in-out;\n  color: #333;\n  \n  &:hover {\n    box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);  \n  } \n`;\n\nexport interface RegularButtonProps {\n    children: React.ReactNode,\n    onClick: () => void,\n    className?: string,\n}\n\nexport const RegularButton = ({children, onClick, className}: RegularButtonProps) => (<Button className={className} onClick={() => onClick()}>{children}</Button>);","import {RegularButton, RegularButtonProps} from \"../designSystem/buttons/RegularButton\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport {GameLevel} from \"../../../domain/minesweeper/gameLevel\";\n\nexport interface LevelButtonProps {\n    onClick: () => void;\n    level: GameLevel;\n    className?: string;\n}\n\ntype LevelRegularButtonProps = RegularButtonProps & LevelButtonProps;\n\nconst backgroundColor = (props: LevelRegularButtonProps) => {\n    switch (props.level) {\n        case GameLevel.EASY:\n            return '#E6FFD9';\n        case GameLevel.MEDIUM:\n            return '#FFE67F';\n        case GameLevel.HARD:\n            return '#E64D5A';\n    }\n};\n\nconst backgroundColorHover = (props: LevelRegularButtonProps) => {\n    switch (props.level) {\n        case GameLevel.EASY:\n            return '#d2ebc6';\n        case GameLevel.MEDIUM:\n            return '#ebd276';\n        case GameLevel.HARD:\n            return '#eb4d5a';\n    }\n};\n\nconst LevelRegularButton = styled(RegularButton)`\n    background-color: ${backgroundColor}\n    transition: background-color 0.5s ease-in-out, box-shadow 0.2s ease-in-out;\n    \n    &:hover {\n       background-color: ${backgroundColorHover}\n    }\n`;\n\nexport const LevelButton = ({onClick, level, className}: LevelButtonProps) =>\n    <LevelRegularButton onClick={() => onClick()} className={className} level={level}>{level}</LevelRegularButton>;","import {LevelButton} from \"./LevelButton\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport {GameLevel, getAllGameLevels} from \"../../../domain/minesweeper/gameLevel\";\n\nconst LevelSelectorSection = styled.section`\n  border-radius: 10px;\n  border: 1px solid #767c8a;\n  padding: 20px;\n`;\n\nconst LevelButtonSection = styled.section`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst LevelButtonWithMargin = styled(LevelButton)`\n  margin: 10px 0;\n  \n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst LevelSelectorTitle = styled.h1`\n  margin: 0 0 20px;\n  padding: 0;\n  font-family: 'Open Sans', sans-serif;\n`;\n\nexport interface LevelSelectorProps {\n    onSelect: (level: GameLevel) => void;\n}\n\nexport const LevelSelector = ({onSelect}: LevelSelectorProps) =>\n    <LevelSelectorSection>\n        <LevelSelectorTitle>Choose the Game Level</LevelSelectorTitle>\n        <LevelButtonSection>\n            {getAllGameLevels().map((gameLevel) =>\n                <LevelButtonWithMargin key={gameLevel} level={gameLevel} onClick={() => onSelect(gameLevel)} />)}\n        </LevelButtonSection>\n    </LevelSelectorSection>;","import {EventPublisher} from \"../../events/events\";\nimport {Minesweeper, MinesweeperCreator, minesweeperFactory} from \"../minesweeper\";\nimport {GameLevel} from \"../gameLevel\";\n\nexport class CreateMinesweeperService {\n    private readonly minesweeperFactory: MinesweeperCreator;\n\n    constructor(private readonly eventPublisher: EventPublisher) {\n        this.minesweeperFactory = minesweeperFactory(this.eventPublisher);\n    }\n\n    public create(gameLevel: GameLevel) {\n        const game = this.minesweeperFactory(gameLevel);\n        this.eventPublisher.publish(Minesweeper.events.created(game))\n    }\n}","import {Coordinate} from \"../../domain/coordinate/coordinate\";\n\ntype BoardCoordinateNotRevealed = {\n    type: 'NOT_REVEALED',\n    coordinate: Coordinate\n};\n\ntype BoardCoordinateRevealedWithBombNear = {\n    type: 'REVEALED_WITH_BOMB_NEAR',\n    bombCount: number,\n    coordinate: Coordinate\n};\n\ntype BoardCoordinateWithNoBombNear = {\n    type: 'REVEALED_WITH_NO_BOMB_NEAR',\n    coordinate: Coordinate\n};\n\ntype BoardCoordinateFlagged = {\n    type: \"FLAGGED\",\n    coordinate: Coordinate\n};\n\nexport type BoardCoordinate =\n    BoardCoordinateNotRevealed\n    | BoardCoordinateRevealedWithBombNear\n    | BoardCoordinateWithNoBombNear\n    | BoardCoordinateFlagged;\n\nexport const isRevealedWithNoBombNear = (boardCoordinate: BoardCoordinate): boardCoordinate is BoardCoordinateWithNoBombNear =>\n    boardCoordinate.type === 'REVEALED_WITH_NO_BOMB_NEAR';\n\nexport const isRevealedWithBombsNear = (boardCoordinate: BoardCoordinate): boardCoordinate is BoardCoordinateRevealedWithBombNear =>\n    boardCoordinate.type === 'REVEALED_WITH_BOMB_NEAR';\n\nexport const isFlagged = (boardCoordinate: BoardCoordinate): boardCoordinate is BoardCoordinateFlagged =>\n    boardCoordinate.type === 'FLAGGED';\n\nexport const isRevealed = (boardCoordinate: BoardCoordinate) =>\n    isRevealedWithBombsNear(boardCoordinate) || isRevealedWithNoBombNear(boardCoordinate);\n\nexport const createNotRevealedCoordinate = (coordinate: Coordinate): BoardCoordinateNotRevealed => ({\n    type: \"NOT_REVEALED\",\n    coordinate: coordinate\n});\n\nexport const createRevealedCoordinateWithoutBombs = (coordinate: Coordinate): BoardCoordinateWithNoBombNear => ({\n    type: \"REVEALED_WITH_NO_BOMB_NEAR\",\n    coordinate: coordinate\n});\n\nexport const createRevealedCoordinateWithBombs = (coordinate: Coordinate, bombCount: number): BoardCoordinateRevealedWithBombNear => ({\n    type: 'REVEALED_WITH_BOMB_NEAR',\n    coordinate: coordinate,\n    bombCount\n});\n\nexport const createFlaggedCoordinate = (coordinate: Coordinate): BoardCoordinateFlagged => ({\n    type: \"FLAGGED\",\n    coordinate\n});","import styled from \"styled-components\";\nimport React from \"react\";\nimport {Coordinate} from \"../../../domain/coordinate/coordinate\";\nimport {\n    BoardCoordinate, isFlagged,\n    isRevealed,\n    isRevealedWithBombsNear,\n    isRevealedWithNoBombNear\n} from \"../../presenters/boardCoordinate\";\n\ninterface GameCoordinateElementProps {\n    boardCoordinate: BoardCoordinate\n}\n\nconst textColor = ({boardCoordinate}: GameCoordinateElementProps) => {\n    if (!isRevealedWithBombsNear(boardCoordinate)) {\n        return '#000000';\n    }\n\n    switch (boardCoordinate.bombCount) {\n        case 1:\n            return '#42b5e6';\n        case 2:\n            return '#6de637';\n        case 3:\n            return '#e6e62d';\n        case 4:\n            return '#e6b13a';\n        case 5:\n            return '#bf6be6';\n        case 6:\n            return '#e6549f';\n        case 7:\n            return '#e65282';\n    }\n    return '#E64D5A';\n};\n\nconst calculateBackground = ({boardCoordinate}: GameCoordinateElementProps) =>\n    isRevealed(boardCoordinate) ? '#FCFCFC' : '#EFEFEF';\n\nconst calculateFontSize = ({boardCoordinate}: GameCoordinateElementProps) =>\n    isFlagged(boardCoordinate) ? '0.6rem' : '1.2rem';\n\nexport const GameCoordinateElement = styled.button`\n  background: ${calculateBackground};\n  font-size: ${calculateFontSize};\n  color: ${textColor};\n`;\n\nexport interface GameCoordinateProps {\n    boardCoordinate: BoardCoordinate;\n    onClick: () => void;\n    onContextMenu: () => void;\n    onMouseEnter: () => void;\n    className?: string;\n}\n\nconst boardCoordinateAriaLabel = (boardCoordinate: BoardCoordinate) => {\n    if (isFlagged(boardCoordinate)) {\n        return `Coordinate ${coordinateToText(boardCoordinate.coordinate)} flagged`;\n    }\n\n    if (isRevealedWithNoBombNear(boardCoordinate)) {\n        return `Coordinate ${coordinateToText(boardCoordinate.coordinate)} reveled with no bomb near`;\n    }\n\n    if (isRevealedWithBombsNear(boardCoordinate)) {\n        return `Coordinate ${coordinateToText(boardCoordinate.coordinate)} reveled with ${boardCoordinate.bombCount} bombs near`;\n    }\n\n    return `Coordinate ${coordinateToText(boardCoordinate.coordinate)}`;\n};\n\nconst boardCoordinateText = (boardCoordinate: BoardCoordinate) => {\n    if (isFlagged(boardCoordinate)) {\n        return '🚩';\n    }\n\n    if (isRevealedWithBombsNear(boardCoordinate)) {\n        return boardCoordinate.bombCount;\n    }\n\n    return null;\n};\n\nconst coordinateToText = (coordinate: Coordinate) => (coordinate.x + 1) + 'x' + (coordinate.y + 1);\n\nexport const GameCoordinateButton = ({onClick, onMouseEnter, boardCoordinate, className, onContextMenu}: GameCoordinateProps) =>\n    <GameCoordinateElement\n        onClick={() => onClick()}\n        onContextMenu={(e) => { e.preventDefault(); onContextMenu() }}\n        className={className}\n        onMouseEnter={() => onMouseEnter()}\n        aria-label={boardCoordinateAriaLabel(boardCoordinate)}\n        boardCoordinate={boardCoordinate}>\n        {boardCoordinateText(boardCoordinate)}\n    </GameCoordinateElement>;","import {Minesweeper} from \"../../domain/minesweeper/minesweeper\";\nimport {Coordinate} from \"../../domain/coordinate/coordinate\";\nimport {\n    BoardCoordinate, createFlaggedCoordinate,\n    createNotRevealedCoordinate,\n    createRevealedCoordinateWithBombs, createRevealedCoordinateWithoutBombs\n} from \"./boardCoordinate\";\nimport {MineIndicator} from \"../../domain/mineIndicator/MineIndicator\";\n\nconst range = (size: number) => Array.from({length: size}, (_, index) => index);\n\nexport class FieldPresenter {\n    constructor(\n        private readonly minesweeper: Minesweeper,\n        private readonly mineIndicator?: MineIndicator\n    ) { }\n\n    public boardCoordinates() {\n        return range(this.boardTotalCoordinates())\n            .map((index) => this.coordinateFromIndex(index))\n            .map((coordinate) => this.boardCoordinate(coordinate));\n    }\n\n    private boardTotalCoordinates() {\n        return this.minesweeper.boardSize().width * this.minesweeper.boardSize().height;\n    }\n\n    private coordinateFromIndex(index: number) {\n        return Coordinate.of({\n            x: index % this.minesweeper.boardSize().width,\n            y: Math.trunc(index / this.minesweeper.boardSize().width)\n        });\n    }\n\n    private boardCoordinate(coordinate: Coordinate): BoardCoordinate {\n        if (this.mineIndicator && this.mineIndicator.isFlagged(coordinate)) {\n            return createFlaggedCoordinate(coordinate)\n        }\n\n        if (!this.minesweeper.isSwept(coordinate)) {\n            return createNotRevealedCoordinate(coordinate);\n        }\n\n        if (this.minesweeper.hasBombNear(coordinate)) {\n            return createRevealedCoordinateWithBombs(coordinate, this.minesweeper.bombCount(coordinate));\n        }\n\n        return createRevealedCoordinateWithoutBombs(coordinate);\n    }\n}","import React, {useState} from \"react\";\nimport styled from \"styled-components\";\nimport {GameCoordinateButton, GameCoordinateProps} from \"./GameCoordinateButton\";\nimport {Minesweeper} from \"../../../domain/minesweeper/minesweeper\";\nimport {Coordinate} from \"../../../domain/coordinate/coordinate\";\nimport {FieldPresenter} from \"../../presenters/FieldPresenter\";\nimport {MineIndicator} from \"../../../domain/mineIndicator/MineIndicator\";\n\nexport interface GameBoardProps {\n    game: Minesweeper;\n    mineIndicator: MineIndicator;\n}\n\ninterface GameBoardGridProps {\n    width: number;\n    height: number;\n}\n\nconst GameBoardGrid = styled.section`\n  display: grid;\n  grid-column-gap: 10px;\n  grid-row-gap: 10px;\n  width: 500px;\n  height: ${(props: GameBoardGridProps) => (500 / props.width * props.height) + 'px'};\n  grid-template-columns: repeat(${(props: GameBoardGridProps) => props.width}, 1fr);\n  grid-template-rows: repeat(${(props: GameBoardGridProps) => props.height}, 1fr);\n`;\n\ntype GameCoordinateButtonHighlightedProps = GameCoordinateProps & {\n    highlightedCoordinates :Coordinate[]\n}\n\nconst getHighlightedColor = (props: GameCoordinateButtonHighlightedProps) => {\n    if (props.highlightedCoordinates.some(coordinate => coordinate.sameOf(props.boardCoordinate.coordinate))) {\n        return '#a3b6d2'\n    }\n    return '#d1dbf0';\n};\n\nexport const GameCoordinateButtonHighlighted = styled(GameCoordinateButton)`\n  border: 2px solid ${getHighlightedColor};\n  transition: border 0.25s linear;\n`;\n\nexport const GameBoard = ({game, mineIndicator}: GameBoardProps) => {\n    const [highlightedCoordinates, setCoordinates] = useState<Coordinate[]>([]);\n\n    return <GameBoardGrid {...game.boardSize()}>\n        {\n            new FieldPresenter(game, mineIndicator)\n                .boardCoordinates()\n                .map((boardCoordinate, index) =>\n                    <GameCoordinateButtonHighlighted\n                        highlightedCoordinates={highlightedCoordinates}\n                        onContextMenu={() => mineIndicator && mineIndicator.toggleFlag(boardCoordinate.coordinate)}\n                        onMouseEnter={() => setCoordinates(boardCoordinate.coordinate.getAdjacent())}\n                        onClick={() => (!mineIndicator || !mineIndicator.isFlagged(boardCoordinate.coordinate)) && game.sweep(boardCoordinate.coordinate)}\n                        boardCoordinate={boardCoordinate} key={index}/>)\n        }\n    </GameBoardGrid>\n};","import React from \"react\";\nimport styled, {keyframes} from \"styled-components\";\n\nconst fromTop = keyframes`\n  from {\n    -webkit-transform: translate3d(0, -100%, 0);\n    transform: translate3d(0, -100%, 0);\n    visibility: visible;\n  }\n\n  to {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n`;\n\nconst GameOverSection = styled.section`\n  animation: ${fromTop} 0.2s forwards;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  text-align: center;\n  top: 0;\n  left: 0;\n\n  div {\n    width: 100%;\n    background: rgba(255, 255, 255, 0.5);\n    padding: 5rem;\n    text-align: center;\n  }\n`;\n\ninterface OverlayMessageProps {\n    children: React.ReactNode;\n    className?: string;\n}\n\nexport const OverlayMessage = ({children, className}: OverlayMessageProps) => <GameOverSection className={className}>\n    <div>{children}</div>\n</GameOverSection>;","import React from \"react\";\nimport styled from \"styled-components\";\nimport {OverlayMessage} from \"../designSystem/messages/OverlayMessage\";\n\nconst GameOverSection = styled(OverlayMessage)`\n    color: red;\n`;\n\nexport const GameOver: React.FC = () => <GameOverSection>\n    <h1>Game Over!</h1>\n</GameOverSection>","import React from \"react\";\nimport styled from \"styled-components\";\nimport {OverlayMessage} from \"../designSystem/messages/OverlayMessage\";\n\nconst GameOverSection = styled(OverlayMessage)`\n    color: #5f9898;\n`;\n\nexport const GameWin: React.FC = () => <GameOverSection>\n    <h1>You Win!</h1>\n</GameOverSection>","import {eventCreator, EventPublisher} from \"../events/events\";\nimport {Coordinate} from \"../coordinate/coordinate\";\n\nexport class MineIndicator {\n    static events = {\n        created: eventCreator<MineIndicator>('MINE_INDICATOR_CREATED'),\n        flagAdded: eventCreator<MineIndicator>('MINE_INDICATOR_ADDED'),\n        flagRemoved: eventCreator<MineIndicator>('MINE_INDICATOR_REMOVED')\n    };\n\n    public constructor(\n        private readonly eventPublisher: EventPublisher,\n        private readonly coordinates: Coordinate[] = []\n    ) {}\n\n    public toggleFlag(coordinate: Coordinate) {\n        if (this.isFlagged(coordinate)) {\n            return this.removeFlag(coordinate);\n        }\n        return this.addFlag(coordinate);\n    }\n\n    private addFlag(coordinate: Coordinate) {\n        const coordinates = [...this.coordinates, coordinate];\n        const newMineIndicator = new MineIndicator(this.eventPublisher, coordinates);\n\n        this.eventPublisher.publish(MineIndicator.events.flagAdded(newMineIndicator));\n        return newMineIndicator;\n    }\n\n    private removeFlag(coordinate: Coordinate) {\n        const coordinates = this.coordinates.filter((addedCoordinate) => !addedCoordinate.sameOf(coordinate));\n        const newMineIndicator = new MineIndicator(this.eventPublisher, coordinates);\n\n        this.eventPublisher.publish(MineIndicator.events.flagRemoved(newMineIndicator));\n        return newMineIndicator;\n    }\n\n    public isFlagged(coordinate: Coordinate) {\n        return this.coordinates.some((addedCoordinate) => addedCoordinate.sameOf(coordinate));\n    }\n}","import {EventPublisher} from \"../events/events\";\nimport {MineIndicator} from \"./MineIndicator\";\n\nexport class MineIndicatorService {\n    constructor(private readonly eventPublisher: EventPublisher) { }\n\n    public create() {\n        const mineIndicator = new MineIndicator(this.eventPublisher);\n        this.eventPublisher.publish(MineIndicator.events.created(mineIndicator));\n    }\n}","import React, {useContext, useEffect, useState} from 'react';\nimport './App.css';\nimport {Minesweeper} from \"./domain/minesweeper/minesweeper\";\nimport {EventHandlerContext} from \"./view/components/eventHandler/eventHandlerContext\";\nimport {LevelSelector} from \"./view/components/levelSelector/LevelSelector\";\nimport {CreateMinesweeperService} from \"./domain/minesweeper/services/createMinesweeperService\";\nimport {anyOf} from \"./domain/events/events\";\nimport {GameBoard} from \"./view/components/board/GameBoard\";\nimport {GameOver} from \"./view/components/gameStatus/gameOver\";\nimport {GameWin} from \"./view/components/gameStatus/gameWin\";\nimport {MineIndicatorService} from \"./domain/mineIndicator/MineIndicatorService\";\nimport {MineIndicator} from \"./domain/mineIndicator/MineIndicator\";\n\n\nconst App: React.FC = () => {\n    const [minesweeper, setMinesweeper] = useState<Minesweeper>();\n    const [mineIndicator, setMineIndicator] = useState<MineIndicator>();\n\n    const eventPublisher = useContext(EventHandlerContext);\n    const createMinesweeperService = new CreateMinesweeperService(eventPublisher);\n    const mineIndicatorService = new MineIndicatorService(eventPublisher);\n\n    useEffect(() => {\n        const minesweeperCreatedSubscriptionID = eventPublisher\n            .listen(Minesweeper.events.created, () => mineIndicatorService.create());\n\n        const mineIndicatorChangedSubscriptionId = eventPublisher\n            .listen(anyOf([\n                MineIndicator.events.created,\n                MineIndicator.events.flagAdded,\n                MineIndicator.events.flagRemoved\n            ]), setMineIndicator);\n\n        const minesweeperChangedSubscriptionID = eventPublisher\n            .listen(anyOf([\n                Minesweeper.events.created,\n                Minesweeper.events.started,\n                Minesweeper.events.revealed,\n                Minesweeper.events.gameOver,\n                Minesweeper.events.finished\n            ]), setMinesweeper);\n\n        return () => {\n            eventPublisher.unsubscribe(minesweeperChangedSubscriptionID);\n            eventPublisher.unsubscribe(minesweeperCreatedSubscriptionID);\n            eventPublisher.unsubscribe(mineIndicatorChangedSubscriptionId);\n        }\n    }, [eventPublisher, mineIndicatorService, minesweeper]);\n\n    return (\n        <div className=\"App\">\n            {!minesweeper && <LevelSelector onSelect={(gameLevel) => createMinesweeperService.create(gameLevel)}/>}\n            {minesweeper && mineIndicator && <GameBoard game={minesweeper} mineIndicator={mineIndicator} />}\n            {minesweeper && minesweeper.isSweeperDead() && <GameOver />}\n            {minesweeper && minesweeper.completelySweptAway() && <GameWin />}\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}